"""
Admin Panel Routes - Administrator boshqaruv paneli
Faqat adminlar uchun maxsus sahifalar va funksiyalar
"""

from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from functools import wraps
from datetime import datetime, timedelta

from app import db
from models import User, Bot, AdminAction, SystemStats, AccessStatus, AdminActionType
from services.access_control import AccessControlService

# Admin blueprint yaratish
admin = Blueprint('admin', __name__, url_prefix='/admin')

def admin_required(f):
    """Admin ruxsati talab qiladigan decorator"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_admin:
            flash('Bu sahifaga faqat adminlar kira oladi!', 'error')
            return redirect(url_for('dashboard'))
        return f(*args, **kwargs)
    return decorated_function

@admin.route('/')
@admin.route('/dashboard')
@login_required
@admin_required
def dashboard():
    \"\"\"Admin asosiy dashboard\"\"\"\n    # Statistikalarni olish\n    stats = AccessControlService.get_user_statistics()\n    \n    # So'nggi admin harakatlarini olish\n    recent_actions = AccessControlService.get_recent_admin_actions(10)\n    \n    # Sinov muddati tugash arafasida bo'lgan foydalanuvchilar\n    expiring_trials = User.query.filter(\n        User.access_status == AccessStatus.TRIAL,\n        User.trial_end_date <= datetime.utcnow() + timedelta(days=1),\n        User.trial_end_date > datetime.utcnow()\n    ).all()\n    \n    # Ruxsat kutayotgan foydalanuvchilar\n    pending_users = AccessControlService.get_pending_users()[:5]  # Faqat 5 tasi\n    \n    return render_template('admin/dashboard.html', \n                         stats=stats,\n                         recent_actions=recent_actions,\n                         expiring_trials=expiring_trials,\n                         pending_users=pending_users)\n\n@admin.route('/users')\n@login_required\n@admin_required\ndef users():\n    \"\"\"Barcha foydalanuvchilar ro'yxati\"\"\"\n    page = request.args.get('page', 1, type=int)\n    status_filter = request.args.get('status')\n    search_query = request.args.get('search', '')\n    \n    # Bazaviy so'rov\n    query = User.query\n    \n    # Qidiruv filtri\n    if search_query:\n        query = query.filter(\n            db.or_(\n                User.username.contains(search_query),\n                User.email.contains(search_query),\n                User.full_name.contains(search_query)\n            )\n        )\n    \n    # Status filtri\n    if status_filter and status_filter != 'all':\n        if status_filter == 'admin':\n            query = query.filter(User.is_admin == True)\n        else:\n            try:\n                status_enum = AccessStatus(status_filter)\n                query = query.filter(User.access_status == status_enum)\n            except ValueError:\n                pass\n    \n    # Sahifalash\n    users = query.order_by(User.created_at.desc()).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    return render_template('admin/users.html', \n                         users=users, \n                         current_filter=status_filter,\n                         search_query=search_query)\n\n@admin.route('/pending-users')\n@login_required\n@admin_required\ndef pending_users():\n    \"\"\"Ruxsat kutayotgan foydalanuvchilar\"\"\"\n    pending = AccessControlService.get_pending_users()\n    return render_template('admin/pending_users.html', users=pending)\n\n@admin.route('/grant-access/<int:user_id>', methods=['POST'])\n@login_required\n@admin_required\ndef grant_access(user_id):\n    \"\"\"Foydalanuvchiga dostup berish\"\"\"\n    user = User.query.get_or_404(user_id)\n    reason = request.form.get('reason', '')\n    \n    try:\n        AccessControlService.grant_access(current_user, user, reason)\n        flash(f'{user.username} ga dostup berildi!', 'success')\n    except Exception as e:\n        flash(f'Xatolik: {str(e)}', 'error')\n    \n    return redirect(request.referrer or url_for('admin.pending_users'))\n\n@admin.route('/revoke-access/<int:user_id>', methods=['POST'])\n@login_required\n@admin_required\ndef revoke_access(user_id):\n    \"\"\"Dostupni olib qo'yish\"\"\"\n    user = User.query.get_or_404(user_id)\n    reason = request.form.get('reason', '')\n    \n    try:\n        AccessControlService.revoke_access(current_user, user, reason)\n        flash(f'{user.username} dan dostup olib qo\\'yildi!', 'warning')\n    except Exception as e:\n        flash(f'Xatolik: {str(e)}', 'error')\n    \n    return redirect(request.referrer or url_for('admin.users'))\n\n@admin.route('/extend-trial/<int:user_id>', methods=['POST'])\n@login_required\n@admin_required\ndef extend_trial(user_id):\n    \"\"\"Sinov muddatini uzaytirish\"\"\"\n    user = User.query.get_or_404(user_id)\n    days = request.form.get('days', 7, type=int)\n    reason = request.form.get('reason', '')\n    \n    try:\n        AccessControlService.extend_trial(current_user, user, days, reason)\n        flash(f'{user.username} ning sinovi {days} kunga uzaytirildi!', 'info')\n    except Exception as e:\n        flash(f'Xatolik: {str(e)}', 'error')\n    \n    return redirect(request.referrer or url_for('admin.users'))\n\n@admin.route('/suspend-user/<int:user_id>', methods=['POST'])\n@login_required\n@admin_required\ndef suspend_user(user_id):\n    \"\"\"Foydalanuvchini to'xtatish\"\"\"\n    user = User.query.get_or_404(user_id)\n    reason = request.form.get('reason', '')\n    \n    try:\n        AccessControlService.suspend_user(current_user, user, reason)\n        flash(f'{user.username} to\\'xtatildi!', 'warning')\n    except Exception as e:\n        flash(f'Xatolik: {str(e)}', 'error')\n    \n    return redirect(request.referrer or url_for('admin.users'))\n\n@admin.route('/actions-history')\n@login_required\n@admin_required\ndef actions_history():\n    \"\"\"Admin harakatlari tarixi\"\"\"\n    page = request.args.get('page', 1, type=int)\n    admin_filter = request.args.get('admin_id', type=int)\n    action_filter = request.args.get('action_type')\n    \n    query = AdminAction.query\n    \n    # Admin filtri\n    if admin_filter:\n        query = query.filter(AdminAction.admin_id == admin_filter)\n    \n    # Harakat turi filtri\n    if action_filter and action_filter != 'all':\n        try:\n            action_enum = AdminActionType(action_filter)\n            query = query.filter(AdminAction.action_type == action_enum)\n        except ValueError:\n            pass\n    \n    actions = query.order_by(AdminAction.action_date.desc()).paginate(\n        page=page, per_page=50, error_out=False\n    )\n    \n    # Admin ro'yxati filter uchun\n    admins = User.query.filter(User.is_admin == True).all()\n    \n    return render_template('admin/actions_history.html', \n                         actions=actions,\n                         admins=admins,\n                         current_admin_filter=admin_filter,\n                         current_action_filter=action_filter)\n\n@admin.route('/statistics')\n@login_required\n@admin_required\ndef statistics():\n    \"\"\"Batafsil statistikalar\"\"\"\n    stats = AccessControlService.get_user_statistics()\n    \n    # Oxirgi 30 kunlik statistika\n    daily_stats = []\n    for i in range(30):\n        date = datetime.utcnow().date() - timedelta(days=i)\n        day_stats = SystemStats.query.filter(\n            SystemStats.date == date\n        ).first()\n        \n        if not day_stats:\n            # Agar o'sha kun uchun statistika bo'lmasa, hisoblash\n            day_stats = {\n                'date': date,\n                'total_users': User.query.filter(\n                    db.func.date(User.created_at) <= date\n                ).count(),\n                'new_users': User.query.filter(\n                    db.func.date(User.created_at) == date\n                ).count()\n            }\n        else:\n            day_stats = {\n                'date': day_stats.date,\n                'total_users': day_stats.total_users,\n                'new_users': 0  # Keyinroq hisoblash\n            }\n        \n        daily_stats.append(day_stats)\n    \n    daily_stats.reverse()  # Eskilardan yangiga\n    \n    return render_template('admin/statistics.html', \n                         stats=stats,\n                         daily_stats=daily_stats)\n\n@admin.route('/api/user-stats')\n@login_required\n@admin_required\ndef api_user_stats():\n    \"\"\"API: Foydalanuvchi statistikalari (AJAX uchun)\"\"\"\n    stats = AccessControlService.get_user_statistics()\n    return jsonify(stats)\n\n@admin.route('/settings')\n@login_required\n@admin_required\ndef settings():\n    \"\"\"Admin sozlamalari\"\"\"\n    return render_template('admin/settings.html')\n